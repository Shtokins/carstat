{"version":3,"sources":["views/MainChart/components/BarChart.js","views/MainChart/helpers.js","views/MainChart/components/LineChart.js","views/MainChart/styles.js","context/carsApi/carsApiContext.js","views/MainChart/components/ControlPanel.js","views/MainChart/components/AdditionalCharts.js","views/MainChart/index.js","views/MainChartBlock/index.js","views/RootApp/index.js","context/carsApi/carsApiReducer.js","context/carsApi/actionTypes.js","context/carsApi/carsApiState.js","App.js","serviceWorker.js","index.js"],"names":["memo","data","options","selectBrand","onElementsClick","chartElement","label","_model","defaultChartDataset","color","borderColor","pointBackgroundColor","backgroundColor","defaultChartOptions","animation","easing","onResize","maintainAspectRatio","responsive","chartColors","getBarChartScales","kpiPrimary","kpiAdditional","showAdditional","removeY","yAxes","id","position","fontStyle","fontColor","ticks","display","scaleLabel","fontSize","labelString","toUpperCase","push","xAxes","gridLines","getLineChartScales","ControlPanelWrapper","styled","div","CarsApiContext","createContext","RadioButton","Radio","Button","RadioGroup","Group","setBlockMode","blockMode","chartSettings","setCharsSettings","yearsOptions","state","obj","cars","sales","Object","keys","map","year","value","reverse","getYearsOptions","useContext","carsApiState","setSetting","setting","console","log","changes","yearPrimary","onChange","e","target","name","checked","brand","useState","chartData","setChartData","useEffect","labels","line","bar","pie","currentBrand","find","el","shares","revenue","forEach","key","lineData","datasets","fill","barData","pieData","lineOptions","legend","scales","title","text","barOptions","pieOptions","fetchAdditionalChartData","className","sm","md","initialChartSettings","MainChart","defaultBrand","additionalBrand","setAdditionalBrand","yAxisID","company","barChartOptions","barChartData","fetchBarChartData","index","values","lineChartOptions","lineChartData","fetchLineChartData","controlPanelProps","MainChartBlock","getCarsData","getData","useCallback","Sider","Layout","RootApp","collapsed","setCollapsed","style","minHeight","collapsible","onCollapse","theme","mode","defaultSelectedKeys","Item","icon","UserOutlined","VideoCameraOutlined","UploadOutlined","handlers","action","payload","loading","carsApiReducer","type","DEFAULT","CarsApiState","children","useReducer","dispatch","a","setLoading","axios","get","response","Provider","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc37186f.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nconst BarChart = ({ data, options, selectBrand }) => {\r\n  const chartClick = chartElement => {\r\n    if (chartElement[0]) {\r\n      const {\r\n        _model: { label }\r\n      } = chartElement[0];\r\n      selectBrand(label);\r\n    }\r\n  };\r\n\r\n  return <Bar options={options} data={data} onElementsClick={chartClick} />;\r\n};\r\n\r\nexport default memo(BarChart);\r\n","const defaultChartDataset = color => ({\r\n  borderColor: color,\r\n  pointBackgroundColor: \"#fff\",\r\n  backgroundColor: color,\r\n  data: []\r\n});\r\n\r\nconst defaultChartOptions = {\r\n  backgroundColor: \"blue\",\r\n  animation: { easing: \"easeOutQuad\" },\r\n  onResize: null,\r\n  maintainAspectRatio: false,\r\n  responsive: true\r\n};\r\n\r\nconst chartColors = [\r\n  \"#FF645D\",\r\n  \"#FFD35B\",\r\n  \"#71D34D\",\r\n  \"#00B4C6\",\r\n  \"#2370EF\",\r\n  \"#AE43BA\"\r\n];\r\n\r\nconst primaryColor = \"#2370EF\";\r\nconst secondaryColor = \"#AE43BA\";\r\n\r\nexport const fetchBarChartData = ({\r\n  data,\r\n  yearPrimary,\r\n  kpiPrimary,\r\n  kpiAdditional,\r\n  showAdditional\r\n}) => {\r\n  const labels = [];\r\n  const datasets = [\r\n    {\r\n      ...defaultChartDataset(primaryColor),\r\n      label: kpiPrimary.toUpperCase(),\r\n      yAxisID: kpiPrimary\r\n    }\r\n  ];\r\n  if (showAdditional)\r\n    datasets.push({\r\n      ...defaultChartDataset(secondaryColor),\r\n      label: kpiAdditional.toUpperCase(),\r\n      yAxisID: kpiAdditional\r\n    });\r\n  data.forEach(company => {\r\n    labels.push(company.brand);\r\n    datasets[0].data.push(company[kpiPrimary][yearPrimary]);\r\n    if (showAdditional) {\r\n      datasets[1].data.push(company[kpiAdditional][yearPrimary]);\r\n    }\r\n  });\r\n\r\n  const scales = getBarChartScales({\r\n    kpiPrimary,\r\n    kpiAdditional,\r\n    showAdditional\r\n  });\r\n\r\n  const barChartOptions = {\r\n    ...defaultChartOptions,\r\n    scales,\r\n    title: {\r\n      display: true,\r\n      position: \"top\",\r\n      text: yearPrimary,\r\n      fontSize: 18\r\n    }\r\n  };\r\n  return { barChartOptions, barChartData: { labels, datasets } };\r\n};\r\n\r\nconst getBarChartScales = ({\r\n  kpiPrimary,\r\n  kpiAdditional,\r\n  showAdditional,\r\n  removeY\r\n}) => {\r\n  const xAxes = [{ gridLines: { display: false } }];\r\n  const yAxes = [\r\n    {\r\n      id: kpiPrimary,\r\n      position: \"left\",\r\n      fontStyle: \"bold\",\r\n      fontColor: primaryColor,\r\n      ticks: {\r\n        fontColor: primaryColor,\r\n        display: !removeY\r\n      },\r\n      scaleLabel: {\r\n        display: !removeY,\r\n        fontColor: primaryColor,\r\n        fontSize: 14,\r\n        fontStyle: \"bold\",\r\n        labelString: kpiPrimary.toUpperCase()\r\n      }\r\n    }\r\n  ];\r\n  if (showAdditional)\r\n    yAxes.push({\r\n      id: kpiAdditional,\r\n      position: \"right\",\r\n      fontStyle: \"bold\",\r\n      fontColor: secondaryColor,\r\n      ticks: {\r\n        fontColor: secondaryColor,\r\n        display: !removeY\r\n      },\r\n      scaleLabel: {\r\n        display: !removeY,\r\n        fontColor: secondaryColor,\r\n        fontSize: 14,\r\n        fontStyle: \"bold\",\r\n        labelString: kpiAdditional.toUpperCase()\r\n      }\r\n    });\r\n  return { xAxes, yAxes };\r\n};\r\n\r\nexport const fetchLineChartData = ({ data, kpiPrimary }) => {\r\n  let labels;\r\n\r\n  const datasets = [];\r\n\r\n  data.forEach((company, index) => {\r\n    const { brand } = company;\r\n    if (!index) labels = Object.keys(company.sales);\r\n    datasets.push({\r\n      ...defaultChartDataset(chartColors[index]),\r\n      fill: false,\r\n      label: brand,\r\n      data: Object.values(company[kpiPrimary])\r\n    });\r\n  });\r\n\r\n  const scales = getLineChartScales({\r\n    kpiPrimary\r\n  });\r\n\r\n  const lineChartOptions = { ...defaultChartOptions, scales };\r\n  return { lineChartOptions, lineChartData: { labels, datasets } };\r\n};\r\n\r\nconst getLineChartScales = ({ kpiPrimary, removeY }) => {\r\n  const xAxes = [{ gridLines: { display: false } }];\r\n  const yAxes = [\r\n    {\r\n      id: kpiPrimary,\r\n      position: \"left\",\r\n      fontStyle: \"bold\",\r\n      fontColor: primaryColor,\r\n      ticks: {\r\n        fontColor: primaryColor,\r\n        display: !removeY\r\n      },\r\n      scaleLabel: {\r\n        display: !removeY,\r\n        fontColor: primaryColor,\r\n        fontSize: 14,\r\n        fontStyle: \"bold\",\r\n        labelString: kpiPrimary.toUpperCase()\r\n      }\r\n    }\r\n  ];\r\n\r\n  return { xAxes, yAxes };\r\n};\r\n\r\nexport const getYearsOptions = state => {\r\n  // eslint-disable-next-line\r\n  const obj = state?.cars?.[0]?.sales ?? {};\r\n  return Object.keys(obj)\r\n    .map(year => ({ label: year, value: year }))\r\n    .reverse();\r\n};\r\n\r\nexport const fetchAdditionalChartData = ({ data, year, brand }) => {\r\n  const labels = [];\r\n  const line = [];\r\n  const bar = [];\r\n  const pie = [];\r\n  const currentBrand = data.find(el => el.brand === brand);\r\n  if (currentBrand) {\r\n    const { sales, shares, revenue } = currentBrand;\r\n    Object.keys(currentBrand.sales).forEach(key => {\r\n      labels.push(key);\r\n      line.push(sales[key]);\r\n      bar.push(revenue[key]);\r\n    });\r\n    pie.push(shares[year]);\r\n    pie.push(100 - shares[year]);\r\n  }\r\n  const lineData = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        ...defaultChartDataset(primaryColor),\r\n        data: line,\r\n        label: brand,\r\n        fill: false\r\n      }\r\n    ]\r\n  };\r\n  const barData = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        ...defaultChartDataset(secondaryColor),\r\n        data: bar,\r\n        label: brand\r\n      }\r\n    ]\r\n  };\r\n  const pieData = {\r\n    labels: [brand, \"Others\"],\r\n    datasets: [\r\n      {\r\n        data: [...pie],\r\n        backgroundColor: [chartColors[0], chartColors[1]]\r\n        // label: brand\r\n      }\r\n    ]\r\n  };\r\n  const lineOptions = {\r\n    ...defaultChartOptions,\r\n    legend: { display: false },\r\n    scales: getLineChartScales({ kpiPrimary: \"sales\", removeY: true }),\r\n    title: {\r\n      display: true,\r\n      position: \"top\",\r\n      text: `${brand} sales history`,\r\n      fontSize: 15\r\n    }\r\n  };\r\n  const barOptions = {\r\n    ...defaultChartOptions,\r\n    legend: { display: false },\r\n    scales: getBarChartScales({ kpiPrimary: \"revenue\", removeY: true }),\r\n    title: {\r\n      display: true,\r\n      position: \"top\",\r\n      text: `${brand} sales revenue`,\r\n      fontSize: 15\r\n    }\r\n  };\r\n  const pieOptions = {\r\n    legend: { display: false },\r\n    title: {\r\n      display: true,\r\n      position: \"top\",\r\n      text: `${brand} ${year} market share`,\r\n      fontSize: 15\r\n    },\r\n    animation: { easing: \"easeOutQuad\" },\r\n    onResize: null,\r\n    maintainAspectRatio: false,\r\n    responsive: true\r\n  };\r\n\r\n  return { lineData, barData, pieData, lineOptions, barOptions, pieOptions };\r\n};\r\n","import React, { memo } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst LineChart = ({ data, options }) => {\r\n  return <Line options={options} data={data} />;\r\n};\r\n\r\nexport default memo(LineChart);\r\n","import styled from \"styled-components\";\r\n\r\nconst ControlPanelWrapper = styled.div`\r\n  height: 60px;\r\n  width: 100%;\r\n  margin: 20px 0;\r\n  border-radius: 10px;\r\n  background-color: #fff;\r\n  padding: 10px;\r\n  display: flex;\r\n  align-items: center;\r\n  border: 1px solid silver;\r\n  > div {\r\n    margin-right: 15px;\r\n  }\r\n\r\n  .ant-radio-wrapper {\r\n    display: block;\r\n  }\r\n`;\r\n\r\nexport { ControlPanelWrapper };\r\n","import { createContext } from \"react\";\r\n\r\nexport const CarsApiContext = createContext();\r\n","import React, { memo, useContext } from \"react\";\r\nimport { ControlPanelWrapper } from \"../styles\";\r\nimport { Radio, Select, Checkbox } from \"antd\";\r\nimport { Icon as FaIcon } from \"react-fa\";\r\nimport { CarsApiContext } from \"../../../context/carsApi/carsApiContext\";\r\nimport { getYearsOptions } from \"../helpers\";\r\n\r\nconst RadioButton = Radio.Button;\r\nconst RadioGroup = Radio.Group;\r\n\r\nconst ControlPanel = ({\r\n  setBlockMode,\r\n  blockMode,\r\n  chartSettings,\r\n  setCharsSettings\r\n}) => {\r\n  const { carsApiState } = useContext(CarsApiContext);\r\n  const yearsOptions = getYearsOptions(carsApiState);\r\n  const setSetting = (setting, value) => {\r\n    console.log(\"setSetting: \", setting, value);\r\n    const changes = { [setting]: value };\r\n    if (setting === \"kpiPrimary\") {\r\n      changes.kpiAdditional = value === \"sales\" ? \"revenue\" : \"sales\";\r\n    }\r\n    if (setting === \"kpiAdditional\") {\r\n      changes.kpiPrimary = value === \"sales\" ? \"revenue\" : \"sales\";\r\n    }\r\n    setCharsSettings({ ...chartSettings, ...changes });\r\n  };\r\n\r\n  const {\r\n    yearPrimary,\r\n    kpiPrimary,\r\n    showAdditional\r\n  } = chartSettings;\r\n\r\n  return (\r\n    <ControlPanelWrapper>\r\n      <RadioGroup\r\n        value={blockMode}\r\n        onChange={e => setBlockMode(e.target.value)}\r\n      >\r\n        <RadioButton value=\"bar\">\r\n          <FaIcon name=\"chart-bar\" /> Bar\r\n        </RadioButton>\r\n        <RadioButton value=\"line\">\r\n          <FaIcon name=\"chart-line\" /> Line\r\n        </RadioButton>\r\n        <RadioButton value=\"table\">\r\n          <FaIcon name=\"table\" /> Table\r\n        </RadioButton>\r\n      </RadioGroup>\r\n      <Select\r\n        // style={{ width: 120 }}\r\n        onChange={year => setSetting(\"yearPrimary\", year)}\r\n        options={yearsOptions}\r\n        value={yearPrimary}\r\n      />\r\n      <Radio.Group\r\n        onChange={e => setSetting(\"kpiPrimary\", e.target.value)}\r\n        value={kpiPrimary}\r\n      >\r\n        <Radio value=\"sales\">Sales</Radio>\r\n        <Radio value=\"revenue\">Revenue</Radio>\r\n      </Radio.Group>\r\n      {blockMode === \"bar\" && (\r\n        <Checkbox\r\n          checked={showAdditional}\r\n          onChange={e => setSetting(\"showAdditional\", e.target.checked)}\r\n        >\r\n          Additional KPI\r\n        </Checkbox>\r\n      )}\r\n    </ControlPanelWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(ControlPanel);\r\n","import React, { useState, useEffect, memo, useContext } from \"react\";\r\nimport { fetchAdditionalChartData } from \"../helpers\";\r\nimport { Row, Col } from \"antd\";\r\nimport { CarsApiContext } from \"../../../context/carsApi/carsApiContext\";\r\nimport { Bar, Line, Doughnut } from \"react-chartjs-2\";\r\n\r\nconst AdditionalCharts = ({ brand, yearPrimary }) => {\r\n  const {\r\n    carsApiState: { cars }\r\n  } = useContext(CarsApiContext);\r\n  const [chartData, setChartData] = useState(null);\r\n  useEffect(() => {\r\n    const {\r\n      barData,\r\n      barOptions,\r\n      lineData,\r\n      lineOptions,\r\n      pieData,\r\n      pieOptions\r\n    } = fetchAdditionalChartData({\r\n      data: cars,\r\n      year: yearPrimary,\r\n      brand\r\n    });\r\n    setChartData({\r\n      barData,\r\n      barOptions,\r\n      lineData,\r\n      lineOptions,\r\n      pieData,\r\n      pieOptions\r\n    });\r\n  }, [brand, yearPrimary]);\r\n  // useEffect(() => {\r\n  //   const { pieData } = fetchAdditionalChartData({\r\n  //     data: cars,\r\n  //     yearPrimary,\r\n  //     brand\r\n  //   });\r\n  //   setChartData({\r\n  //     ...chartData,\r\n  //     pieData\r\n  //   });\r\n  // }, [yearPrimary]);\r\n  if (!chartData) return null;\r\n  console.log(\"chartData\", chartData);\r\n  const {\r\n    barData,\r\n    barOptions,\r\n    lineData,\r\n    lineOptions,\r\n    pieData,\r\n    pieOptions\r\n  } = chartData;\r\n  return (\r\n    <Row className=\"additional-charts-row\">\r\n      <Col sm={24} md={8}>\r\n        <Line options={lineOptions} data={lineData} />\r\n      </Col>\r\n      <Col sm={24} md={8}>\r\n        <Bar options={barOptions} data={barData} />\r\n      </Col>\r\n      <Col sm={24} md={8}>\r\n        <Doughnut options={pieOptions} data={pieData} />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\nexport default memo(AdditionalCharts);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport BarChart from \"./components/BarChart\";\r\nimport { fetchBarChartData, fetchLineChartData } from \"./helpers\";\r\nimport LineChart from \"./components/LineChart\";\r\nimport ControlPanel from \"./components/ControlPanel\";\r\nimport AdditionalCharts from \"./components/AdditionalCharts\";\r\n\r\nconst initialChartSettings = {\r\n  yearPrimary: \"2019\",\r\n  kpiPrimary: \"sales\",\r\n  kpiAdditional: \"revenue\",\r\n  showAdditional: false\r\n};\r\n\r\nexport const MainChart = ({ cars }) => {\r\n  const defaultBrand = cars?.[0]?.brand ?? \"Toyota\";\r\n  const [blockMode, setBlockMode] = useState(\"bar\");\r\n  const [chartSettings, setCharsSettings] = useState(initialChartSettings);\r\n  const [chartData, setChartData] = useState(null);\r\n  const [additionalBrand, setAdditionalBrand] = useState(defaultBrand);\r\n\r\n  useEffect(() => {\r\n    const {\r\n      yearPrimary,\r\n      kpiPrimary,\r\n      kpiAdditional,\r\n      showAdditional\r\n    } = chartSettings;\r\n    const { barChartData, barChartOptions } = fetchBarChartData({\r\n      data: cars,\r\n      yearPrimary,\r\n      kpiPrimary,\r\n      kpiAdditional,\r\n      showAdditional\r\n    });\r\n    const { lineChartData, lineChartOptions } = fetchLineChartData({\r\n      data: cars,\r\n      yearPrimary,\r\n      kpiPrimary,\r\n      showAdditional\r\n    });\r\n    setChartData({\r\n      barChartOptions,\r\n      barChartData,\r\n      lineChartData,\r\n      lineChartOptions\r\n    });\r\n  }, [cars, chartSettings]);\r\n  if (!cars) return null;\r\n  const controlPanelProps = {\r\n    setBlockMode,\r\n    blockMode,\r\n    chartSettings,\r\n    setCharsSettings\r\n  };\r\n  return (\r\n    <div className=\"main-chart\">\r\n      <ControlPanel {...controlPanelProps} />\r\n\r\n      <div className=\"main-chart-container\">\r\n        {chartData && blockMode === \"bar\" && (\r\n          <BarChart\r\n            data={chartData.barChartData}\r\n            options={chartData.barChartOptions}\r\n            selectBrand={setAdditionalBrand}\r\n          />\r\n        )}\r\n        {chartData && blockMode === \"line\" && (\r\n          <LineChart\r\n            data={chartData.lineChartData}\r\n            options={chartData.lineChartOptions}\r\n          />\r\n        )}\r\n        {blockMode === \"table\" && <div>Table here</div>}\r\n      </div>\r\n      <AdditionalCharts\r\n        brand={additionalBrand}\r\n        yearPrimary={chartSettings.yearPrimary}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useContext, useCallback } from \"react\";\r\nimport { MainChart } from \"../MainChart\";\r\nimport { CarsApiContext } from \"../../context/carsApi/carsApiContext\";\r\n\r\nexport const MainChartBlock = () => {\r\n  const { getCarsData, carsApiState } = useContext(CarsApiContext);\r\n  const getData = useCallback(() => {\r\n    getCarsData();\r\n    //eslint-disable-next-line\r\n  }, []);\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n  console.log(\"carsApiState: \", carsApiState);\r\n  return carsApiState.cars ? <MainChart cars={carsApiState.cars} /> : null;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport { MainChartBlock } from \"../MainChartBlock\";\r\nimport {\r\n  // MenuUnfoldOutlined,\r\n  // MenuFoldOutlined,\r\n  UserOutlined,\r\n  VideoCameraOutlined,\r\n  UploadOutlined\r\n} from \"@ant-design/icons\";\r\n\r\nconst {  Sider } = Layout;\r\n\r\nexport const RootApp = () => {\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  return (\r\n    <Layout style={{ minHeight: \"100vh\", backgroundColor: \"#f2f2f2\" }}>\r\n      <Sider collapsible collapsed={collapsed} onCollapse={setCollapsed}>\r\n        <div className=\"logo\" />\r\n        <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\r\n          <Menu.Item key=\"1\" icon={<UserOutlined />}>\r\n            nav 1\r\n          </Menu.Item>\r\n          <Menu.Item key=\"2\" icon={<VideoCameraOutlined />}>\r\n            nav 2\r\n          </Menu.Item>\r\n          <Menu.Item key=\"3\" icon={<UploadOutlined />}>\r\n            nav 3\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Sider>\r\n      <div className=\"dashboard container\">\r\n        <MainChartBlock />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n","import * as t from \"./actionTypes\";\r\n\r\nconst handlers = {\r\n  [t.GET_CARS_DATA]: (state, action) => ({\r\n    ...state,\r\n    cars: action.payload,\r\n    loading: false\r\n  }),\r\n  [t.SET_LOADING]: state => ({ ...state, loading: true }),\r\n  DEFAULT: state => state\r\n};\r\n\r\nexport const carsApiReducer = (state, action) => {\r\n  const handler = handlers[action.type] || handlers.DEFAULT;\r\n  return handler(state, action);\r\n};\r\n","export const GET_CARS_DATA = \"carsApi/GET_CARS_DATA\";\r\nexport const SET_LOADING = \"carsApi/SET_LOADING\";\r\n","import React, { useReducer } from \"react\";\r\nimport { CarsApiContext } from \"./carsApiContext\";\r\nimport { carsApiReducer } from \"./carsApiReducer\";\r\nimport * as t from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport const CarsApiState = ({ children }) => {\r\n  const [state, dispatch] = useReducer(carsApiReducer, {});\r\n\r\n  const getCarsData = async () => {\r\n    setLoading();\r\n    const response = await axios.get(\"cars.json\");\r\n    console.log(\"response: \", response);\r\n    dispatch({ type: t.GET_CARS_DATA, payload: response.data });\r\n  };\r\n\r\n  const setLoading = () => {\r\n    dispatch({ type: t.SET_LOADING });\r\n  };\r\n\r\n  return (\r\n    <CarsApiContext.Provider value={{ getCarsData, carsApiState: state }}>\r\n      {children}\r\n    </CarsApiContext.Provider>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { RootApp } from \"./views/RootApp\";\r\nimport \"antd/dist/antd.css\";\r\nimport { CarsApiState } from \"./context/carsApi/carsApiState\";\r\n\r\nfunction App() {\r\n  return (\r\n    <CarsApiState>\r\n      <RootApp />\r\n    </CarsApiState>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}