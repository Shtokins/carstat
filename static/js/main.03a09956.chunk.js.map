{"version":3,"sources":["views/MainChart/components/BarChart.js","views/MainChart/chartHelpers.js","views/MainChart/components/LineChart.js","views/MainChart/styles.js","context/carsApi/carsApiContext.js","views/MainChart/components/ControlPanel.js","views/MainChart/components/AdditionalCharts.js","views/MainChart/components/tables/AgGrid.js","views/MainChart/components/tables/index.js","views/MainChart/dataHelpers.js","views/MainChart/index.js","views/MainChartBlock/index.js","views/RootApp/index.js","context/carsApi/carsApiReducer.js","context/carsApi/actionTypes.js","context/carsApi/carsApiState.js","App.js","serviceWorker.js","index.js"],"names":["memo","data","options","selectBrand","onElementsClick","chartElement","label","_model","defaultChartDataset","color","borderColor","pointBackgroundColor","backgroundColor","defaultChartOptions","animation","easing","onResize","maintainAspectRatio","responsive","chartColors","getBarChartScales","kpiPrimary","kpiAdditional","showAdditional","removeY","yAxes","id","position","fontStyle","fontColor","ticks","display","scaleLabel","fontSize","labelString","toUpperCase","push","xAxes","gridLines","getLineChartScales","ControlPanelWrapper","styled","div","CarsApiContext","createContext","RadioButton","Radio","Button","RadioGroup","Group","setBlockMode","blockMode","chartSettings","setCharsSettings","tableType","setTableType","yearsOptions","state","obj","cars","sales","Object","keys","map","year","value","reverse","getYearsOptions","useContext","carsApiState","setSetting","setting","changes","yearPrimary","onChange","e","target","name","checked","brand","useState","chartData","setChartData","useEffect","labels","line","bar","pie","currentBrand","find","el","shares","revenue","forEach","key","lineData","datasets","fill","barData","pieData","lineOptions","legend","scales","title","text","barOptions","pieOptions","fetchAdditionalChartData","className","sm","md","tableData","debounce","params","api","sizeColumnsToFit","style","height","width","columnDefs","rowData","defaultColDef","sortable","resizable","rowSelection","onSelectionChanged","getSelectedRows","onGridReady","onGridSizeChanged","headerName","field","company","index","concat","targetKpi","newRow","prepareTable","initialChartSettings","MainChart","defaultBrand","additionalBrand","setAdditionalBrand","yAxisID","barChartOptions","barChartData","fetchBarChartData","values","lineChartOptions","lineChartData","fetchLineChartData","controlPanelProps","cursor","MainChartBlock","getCarsData","getData","useCallback","Sider","Layout","RootApp","collapsed","setCollapsed","minHeight","collapsible","onCollapse","theme","mode","defaultSelectedKeys","Item","icon","UserOutlined","VideoCameraOutlined","UploadOutlined","handlers","action","payload","loading","carsApiReducer","type","DEFAULT","CarsApiState","children","useReducer","dispatch","a","setLoading","axios","get","response","console","log","error","Provider","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.03a09956.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nconst BarChart = ({ data, options, selectBrand }) => {\n  const chartClick = chartElement => {\n    if (chartElement[0]) {\n      const {\n        _model: { label }\n      } = chartElement[0];\n      selectBrand(label);\n    }\n  };\n\n  return <Bar options={options} data={data} onElementsClick={chartClick} />;\n};\n\nexport default memo(BarChart);\n","const defaultChartDataset = color => ({\n  borderColor: color,\n  pointBackgroundColor: \"#fff\",\n  backgroundColor: color,\n  data: []\n});\n\nconst defaultChartOptions = {\n  backgroundColor: \"blue\",\n  animation: { easing: \"easeOutQuad\" },\n  onResize: null,\n  maintainAspectRatio: false,\n  responsive: true\n};\n\nconst chartColors = [\n  \"#FF645D\",\n  \"#FFD35B\",\n  \"#71D34D\",\n  \"#00B4C6\",\n  \"#2370EF\",\n  \"#AE43BA\"\n];\n\nconst primaryColor = \"#2370EF\";\nconst secondaryColor = \"#AE43BA\";\n\nexport const fetchBarChartData = ({\n  data,\n  yearPrimary,\n  kpiPrimary,\n  kpiAdditional,\n  showAdditional\n}) => {\n  const labels = [];\n  const datasets = [\n    {\n      ...defaultChartDataset(primaryColor),\n      label: kpiPrimary.toUpperCase(),\n      yAxisID: kpiPrimary\n    }\n  ];\n  if (showAdditional)\n    datasets.push({\n      ...defaultChartDataset(secondaryColor),\n      label: kpiAdditional.toUpperCase(),\n      yAxisID: kpiAdditional\n    });\n  data.forEach(company => {\n    labels.push(company.brand);\n    datasets[0].data.push(company[kpiPrimary][yearPrimary]);\n    if (showAdditional) {\n      datasets[1].data.push(company[kpiAdditional][yearPrimary]);\n    }\n  });\n\n  const scales = getBarChartScales({\n    kpiPrimary,\n    kpiAdditional,\n    showAdditional\n  });\n\n  const barChartOptions = {\n    ...defaultChartOptions,\n    scales,\n    title: {\n      display: true,\n      position: \"top\",\n      text: yearPrimary,\n      fontSize: 18\n    }\n  };\n  return { barChartOptions, barChartData: { labels, datasets } };\n};\n\nconst getBarChartScales = ({\n  kpiPrimary,\n  kpiAdditional,\n  showAdditional,\n  removeY\n}) => {\n  const xAxes = [{ gridLines: { display: false } }];\n  const yAxes = [\n    {\n      id: kpiPrimary,\n      position: \"left\",\n      fontStyle: \"bold\",\n      fontColor: primaryColor,\n      ticks: {\n        fontColor: primaryColor,\n        display: !removeY\n      },\n      scaleLabel: {\n        display: !removeY,\n        fontColor: primaryColor,\n        fontSize: 14,\n        fontStyle: \"bold\",\n        labelString: kpiPrimary.toUpperCase()\n      }\n    }\n  ];\n  if (showAdditional)\n    yAxes.push({\n      id: kpiAdditional,\n      position: \"right\",\n      fontStyle: \"bold\",\n      fontColor: secondaryColor,\n      ticks: {\n        fontColor: secondaryColor,\n        display: !removeY\n      },\n      scaleLabel: {\n        display: !removeY,\n        fontColor: secondaryColor,\n        fontSize: 14,\n        fontStyle: \"bold\",\n        labelString: kpiAdditional.toUpperCase()\n      }\n    });\n  return { xAxes, yAxes };\n};\n\nexport const fetchLineChartData = ({ data, kpiPrimary }) => {\n  let labels;\n\n  const datasets = [];\n\n  data.forEach((company, index) => {\n    const { brand } = company;\n    if (!index) labels = Object.keys(company.sales);\n    datasets.push({\n      ...defaultChartDataset(chartColors[index]),\n      fill: false,\n      label: brand,\n      data: Object.values(company[kpiPrimary])\n    });\n  });\n\n  const scales = getLineChartScales({\n    kpiPrimary\n  });\n\n  const lineChartOptions = { ...defaultChartOptions, scales };\n  return { lineChartOptions, lineChartData: { labels, datasets } };\n};\n\nconst getLineChartScales = ({ kpiPrimary, removeY }) => {\n  const xAxes = [{ gridLines: { display: false } }];\n  const yAxes = [\n    {\n      id: kpiPrimary,\n      position: \"left\",\n      fontStyle: \"bold\",\n      fontColor: primaryColor,\n      ticks: {\n        fontColor: primaryColor,\n        display: !removeY\n      },\n      scaleLabel: {\n        display: !removeY,\n        fontColor: primaryColor,\n        fontSize: 14,\n        fontStyle: \"bold\",\n        labelString: kpiPrimary.toUpperCase()\n      }\n    }\n  ];\n\n  return { xAxes, yAxes };\n};\n\nexport const getYearsOptions = state => {\n  // eslint-disable-next-line\n  const obj = state?.cars?.[0]?.sales ?? {};\n  return Object.keys(obj)\n    .map(year => ({ label: year, value: year }))\n    .reverse();\n};\n\nexport const fetchAdditionalChartData = ({ data, year, brand }) => {\n  const labels = [];\n  const line = [];\n  const bar = [];\n  const pie = [];\n  const currentBrand = data.find(el => el.brand === brand);\n  if (currentBrand) {\n    const { sales, shares, revenue } = currentBrand;\n    Object.keys(currentBrand.sales).forEach(key => {\n      labels.push(key);\n      line.push(sales[key]);\n      bar.push(revenue[key]);\n    });\n    pie.push(shares[year]);\n    pie.push(100 - shares[year]);\n  }\n  const lineData = {\n    labels,\n    datasets: [\n      {\n        ...defaultChartDataset(primaryColor),\n        data: line,\n        label: brand,\n        fill: false\n      }\n    ]\n  };\n  const barData = {\n    labels,\n    datasets: [\n      {\n        ...defaultChartDataset(secondaryColor),\n        data: bar,\n        label: brand\n      }\n    ]\n  };\n  const pieData = {\n    labels: [brand, \"Others\"],\n    datasets: [\n      {\n        data: [...pie],\n        backgroundColor: [chartColors[0], chartColors[1]]\n        // label: brand\n      }\n    ]\n  };\n  const lineOptions = {\n    ...defaultChartOptions,\n    legend: { display: false },\n    scales: getLineChartScales({ kpiPrimary: \"sales\", removeY: true }),\n    title: {\n      display: true,\n      position: \"top\",\n      text: `${brand} sales history`,\n      fontSize: 15\n    }\n  };\n  const barOptions = {\n    ...defaultChartOptions,\n    legend: { display: false },\n    scales: getBarChartScales({ kpiPrimary: \"revenue\", removeY: true }),\n    title: {\n      display: true,\n      position: \"top\",\n      text: `${brand} sales revenue`,\n      fontSize: 15\n    }\n  };\n  const pieOptions = {\n    legend: { display: false },\n    title: {\n      display: true,\n      position: \"top\",\n      text: `${brand} ${year} market share`,\n      fontSize: 15\n    },\n    animation: { easing: \"easeOutQuad\" },\n    onResize: null,\n    maintainAspectRatio: false,\n    responsive: true\n  };\n\n  return { lineData, barData, pieData, lineOptions, barOptions, pieOptions };\n};\n","import React, { memo } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst LineChart = ({ data, options }) => {\n  return <Line options={options} data={data} />;\n};\n\nexport default memo(LineChart);\n","import styled from \"styled-components\";\n\nconst ControlPanelWrapper = styled.div`\n  height: 60px;\n  width: 100%;\n  margin: 20px 0;\n  border-radius: 10px;\n  background-color: #fff;\n  padding: 10px;\n  display: flex;\n  align-items: center;\n  border: 1px solid silver;\n  > div {\n    margin-right: 15px;\n  }\n\n  .ant-radio-wrapper {\n    display: block;\n  }\n`;\n\nexport { ControlPanelWrapper };\n","import { createContext } from \"react\";\n\nexport const CarsApiContext = createContext();\n","import React, { memo, useContext } from \"react\";\nimport { ControlPanelWrapper } from \"../styles\";\nimport { Radio, Select, Checkbox } from \"antd\";\nimport { Icon as FaIcon } from \"react-fa\";\nimport { CarsApiContext } from \"../../../context/carsApi/carsApiContext\";\nimport { getYearsOptions } from \"../chartHelpers\";\n\nconst RadioButton = Radio.Button;\nconst RadioGroup = Radio.Group;\n\nconst ControlPanel = ({\n  setBlockMode,\n  blockMode,\n  chartSettings,\n  setCharsSettings,\n  tableType,\n  setTableType\n}) => {\n  const { carsApiState } = useContext(CarsApiContext);\n  const yearsOptions = getYearsOptions(carsApiState);\n  const setSetting = (setting, value) => {\n    const changes = { [setting]: value };\n    if (setting === \"kpiPrimary\") {\n      changes.kpiAdditional = value === \"sales\" ? \"revenue\" : \"sales\";\n    }\n    if (setting === \"kpiAdditional\") {\n      changes.kpiPrimary = value === \"sales\" ? \"revenue\" : \"sales\";\n    }\n    setCharsSettings({ ...chartSettings, ...changes });\n  };\n\n  const { yearPrimary, kpiPrimary, showAdditional } = chartSettings;\n\n  return (\n    <ControlPanelWrapper>\n      <RadioGroup\n        value={blockMode}\n        onChange={e => setBlockMode(e.target.value)}\n      >\n        <RadioButton value=\"bar\">\n          <FaIcon name=\"chart-bar\" /> Bar\n        </RadioButton>\n        <RadioButton value=\"line\">\n          <FaIcon name=\"chart-line\" /> Line\n        </RadioButton>\n        <RadioButton value=\"table\">\n          <FaIcon name=\"table\" /> Table\n        </RadioButton>\n      </RadioGroup>\n      {blockMode !== \"table\" && (\n        <Select\n          // style={{ width: 120 }}\n          onChange={year => setSetting(\"yearPrimary\", year)}\n          options={yearsOptions}\n          value={yearPrimary}\n        />\n      )}\n      <Radio.Group\n        onChange={e => setSetting(\"kpiPrimary\", e.target.value)}\n        value={kpiPrimary}\n      >\n        <Radio value=\"sales\">Sales</Radio>\n        <Radio value=\"revenue\">Revenue</Radio>\n      </Radio.Group>\n      {blockMode === \"bar\" && (\n        <Checkbox\n          checked={showAdditional}\n          onChange={e => setSetting(\"showAdditional\", e.target.checked)}\n        >\n          Additional KPI\n        </Checkbox>\n      )}\n      {blockMode === \"table\" && (\n        <RadioGroup\n          value={tableType}\n          onChange={e => setTableType(e.target.value)}\n        >\n          <RadioButton value=\"ag\">ag-Grid</RadioButton>\n          <RadioButton value=\"line\">React-Table</RadioButton>\n          <RadioButton value=\"antd\">Ant Design Grid</RadioButton>\n        </RadioGroup>\n      )}\n    </ControlPanelWrapper>\n  );\n};\n\nexport default memo(ControlPanel);\n","import React, { useState, useEffect, memo, useContext } from \"react\";\nimport { fetchAdditionalChartData } from \"../chartHelpers\";\nimport { Row, Col } from \"antd\";\nimport { CarsApiContext } from \"../../../context/carsApi/carsApiContext\";\nimport { Bar, Line, Doughnut } from \"react-chartjs-2\";\n\nconst AdditionalCharts = ({ brand, yearPrimary }) => {\n  const {\n    carsApiState: { cars }\n  } = useContext(CarsApiContext);\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    const {\n      barData,\n      barOptions,\n      lineData,\n      lineOptions,\n      pieData,\n      pieOptions\n    } = fetchAdditionalChartData({\n      data: cars,\n      year: yearPrimary,\n      brand\n    });\n    setChartData({\n      barData,\n      barOptions,\n      lineData,\n      lineOptions,\n      pieData,\n      pieOptions\n    });\n  }, [brand, yearPrimary]);\n  // useEffect(() => {\n  //   const { pieData } = fetchAdditionalChartData({\n  //     data: cars,\n  //     yearPrimary,\n  //     brand\n  //   });\n  //   setChartData({\n  //     ...chartData,\n  //     pieData\n  //   });\n  // }, [yearPrimary]);\n  if (!chartData) return null;\n  // console.log(\"chartData\", chartData);\n  const {\n    barData,\n    barOptions,\n    lineData,\n    lineOptions,\n    pieData,\n    pieOptions\n  } = chartData;\n  return (\n    <Row className=\"additional-charts-row\">\n      <Col sm={24} md={8}>\n        <Line options={lineOptions} data={lineData} />\n      </Col>\n      <Col sm={24} md={8}>\n        <Bar options={barOptions} data={barData} />\n      </Col>\n      <Col sm={24} md={8}>\n        <Doughnut options={pieOptions} data={pieData} />\n      </Col>\n    </Row>\n  );\n};\nexport default memo(AdditionalCharts);\n","import React, { memo } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\nimport { debounce } from \"throttle-debounce\";\n\nconst AgGrid = ({ tableData, selectBrand }) => {\n  // console.log(\"AgGrid tableData: \", tableData);\n\n  const onSelectionChanged = params => {\n    var selectedRows = params.api.getSelectedRows();\n    // console.log(\"onSelectionChanged -> selectedRows\", selectedRows);\n    const { brand } = selectedRows[0];\n    selectBrand(brand);\n  };\n\n  const onGridReady = params => {\n    params.api.sizeColumnsToFit();\n  };\n\n  const onResize = debounce(300, params => {\n    params.api.sizeColumnsToFit();\n  });\n\n  return (\n    <div className=\"ag-theme-balham\" style={{ height: \"100%\", width: \"100%\" }}>\n      <AgGridReact\n        columnDefs={tableData.columnDefs}\n        rowData={tableData.rowData}\n        defaultColDef={{\n          sortable: true,\n          resizable: true\n        }}\n        rowSelection=\"single\"\n        onSelectionChanged={onSelectionChanged}\n        onGridReady={onGridReady}\n        onGridSizeChanged={onResize}\n      ></AgGridReact>\n    </div>\n  );\n};\n\nexport default memo(AgGrid);\n","import React, { memo } from \"react\";\nimport { prepareTable } from \"../../dataHelpers\";\nimport AgGrid from \"./AgGrid\";\n\nconst Tables = ({ data, tableType, kpiPrimary, selectBrand }) => {\n  const tableData = prepareTable(data, tableType, kpiPrimary);\n\n  if (tableType === \"ag\") {\n    return <AgGrid tableData={tableData} selectBrand={selectBrand} />;\n  } else {\n    return <div>Another Grids Will be soon here!</div>;\n  }\n};\n\nexport default memo(Tables);\n","export const prepareTable = (data, tableType, kpiPrimary) => {\n  if (tableType === \"ag\") {\n    let columnDefs = [{ headerName: \"Brand\", field: \"brand\" }];\n    const rowData = [];\n    data.forEach((company, index) => {\n      if (!index) {\n        columnDefs = columnDefs.concat(\n          Object.keys(company.sales).map(year => ({\n            headerName: year,\n            field: year\n          }))\n        );\n      }\n      const targetKpi = company[kpiPrimary];\n      const newRow = { brand: company.brand };\n\n      Object.keys(targetKpi).forEach(year => (newRow[year] = targetKpi[year]));\n      rowData.push(newRow);\n    });\n    return { columnDefs, rowData };\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport BarChart from \"./components/BarChart\";\nimport { fetchBarChartData, fetchLineChartData } from \"./chartHelpers\";\nimport LineChart from \"./components/LineChart\";\nimport ControlPanel from \"./components/ControlPanel\";\nimport AdditionalCharts from \"./components/AdditionalCharts\";\nimport Tables from \"./components/tables\";\n\nconst initialChartSettings = {\n  yearPrimary: \"2019\",\n  kpiPrimary: \"sales\",\n  kpiAdditional: \"revenue\",\n  showAdditional: false\n};\n\nexport const MainChart = ({ cars }) => {\n  const defaultBrand = cars?.[0]?.brand ?? \"Toyota\";\n  const [blockMode, setBlockMode] = useState(\"bar\");\n  const [chartSettings, setCharsSettings] = useState(initialChartSettings);\n  const [chartData, setChartData] = useState(null);\n  const [additionalBrand, setAdditionalBrand] = useState(defaultBrand);\n  const [tableType, setTableType] = useState(\"ag\");\n\n  useEffect(() => {\n    const {\n      yearPrimary,\n      kpiPrimary,\n      kpiAdditional,\n      showAdditional\n    } = chartSettings;\n    const { barChartData, barChartOptions } = fetchBarChartData({\n      data: cars,\n      yearPrimary,\n      kpiPrimary,\n      kpiAdditional,\n      showAdditional\n    });\n    const { lineChartData, lineChartOptions } = fetchLineChartData({\n      data: cars,\n      yearPrimary,\n      kpiPrimary,\n      showAdditional\n    });\n    setChartData({\n      barChartOptions,\n      barChartData,\n      lineChartData,\n      lineChartOptions\n    });\n  }, [cars, chartSettings]);\n  if (!cars) return null;\n  const controlPanelProps = {\n    setBlockMode,\n    blockMode,\n    chartSettings,\n    setCharsSettings,\n    tableType,\n    setTableType\n  };\n  return (\n    <div className=\"main-chart\">\n      <ControlPanel {...controlPanelProps} />\n\n      <div\n        className=\"main-chart-container\"\n        style={blockMode === \"bar\" ? { cursor: \"pointer\" } : {}}\n      >\n        {chartData && blockMode === \"bar\" && (\n          <BarChart\n            data={chartData.barChartData}\n            options={chartData.barChartOptions}\n            selectBrand={setAdditionalBrand}\n          />\n        )}\n        {chartData && blockMode === \"line\" && (\n          <LineChart\n            data={chartData.lineChartData}\n            options={chartData.lineChartOptions}\n          />\n        )}\n        {blockMode === \"table\" && (\n          <Tables\n            data={cars}\n            tableType={tableType}\n            kpiPrimary={chartSettings.kpiPrimary}\n            selectBrand={setAdditionalBrand}\n          />\n        )}\n      </div>\n      <AdditionalCharts\n        brand={additionalBrand}\n        yearPrimary={chartSettings.yearPrimary}\n      />\n    </div>\n  );\n};\n","import React, { useEffect, useContext, useCallback } from \"react\";\nimport { MainChart } from \"../MainChart\";\nimport { CarsApiContext } from \"../../context/carsApi/carsApiContext\";\n\nexport const MainChartBlock = () => {\n  const { getCarsData, carsApiState } = useContext(CarsApiContext);\n  const getData = useCallback(() => {\n    getCarsData();\n    //eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    getData();\n  }, [getData]);\n  // console.log(\"carsApiState: \", carsApiState);\n  return carsApiState.cars ? <MainChart cars={carsApiState.cars} /> : null;\n};\n","import React, { useState } from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { MainChartBlock } from \"../MainChartBlock\";\nimport {\n  // MenuUnfoldOutlined,\n  // MenuFoldOutlined,\n  UserOutlined,\n  VideoCameraOutlined,\n  UploadOutlined\n} from \"@ant-design/icons\";\n\nconst {  Sider } = Layout;\n\nexport const RootApp = () => {\n  const [collapsed, setCollapsed] = useState(false);\n  return (\n    <Layout style={{ minHeight: \"100vh\", backgroundColor: \"#f2f2f2\" }}>\n      <Sider collapsible collapsed={collapsed} onCollapse={setCollapsed}>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\n          <Menu.Item key=\"1\" icon={<UserOutlined />}>\n            nav 1\n          </Menu.Item>\n          <Menu.Item key=\"2\" icon={<VideoCameraOutlined />}>\n            nav 2\n          </Menu.Item>\n          <Menu.Item key=\"3\" icon={<UploadOutlined />}>\n            nav 3\n          </Menu.Item>\n        </Menu>\n      </Sider>\n      <div className=\"dashboard container\">\n        <MainChartBlock />\n      </div>\n    </Layout>\n  );\n};\n","import * as t from \"./actionTypes\";\n\nconst handlers = {\n  [t.GET_CARS_DATA]: (state, action) => ({\n    ...state,\n    cars: action.payload,\n    loading: false\n  }),\n  [t.SET_LOADING]: state => ({ ...state, loading: true }),\n  DEFAULT: state => state\n};\n\nexport const carsApiReducer = (state, action) => {\n  const handler = handlers[action.type] || handlers.DEFAULT;\n  return handler(state, action);\n};\n","export const GET_CARS_DATA = \"carsApi/GET_CARS_DATA\";\nexport const SET_LOADING = \"carsApi/SET_LOADING\";\n","import React, { useReducer } from \"react\";\nimport { CarsApiContext } from \"./carsApiContext\";\nimport { carsApiReducer } from \"./carsApiReducer\";\nimport * as t from \"./actionTypes\";\nimport axios from \"axios\";\n\nexport const CarsApiState = ({ children }) => {\n  const [state, dispatch] = useReducer(carsApiReducer, {});\n\n  const getCarsData = async () => {\n    setLoading();\n    try {\n      const response = await axios.get(\"cars.json\");\n      console.log(\"response: \", response);\n      dispatch({ type: t.GET_CARS_DATA, payload: response.data });\n    } catch (error) {\n      console.error(\"GET DATA ERROR: \", error);\n    }\n  };\n\n  const setLoading = () => {\n    dispatch({ type: t.SET_LOADING });\n  };\n\n  return (\n    <CarsApiContext.Provider value={{ getCarsData, carsApiState: state }}>\n      {children}\n    </CarsApiContext.Provider>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { RootApp } from \"./views/RootApp\";\nimport \"antd/dist/antd.css\";\nimport { CarsApiState } from \"./context/carsApi/carsApiState\";\n\nfunction App() {\n  return (\n    <CarsApiState>\n      <RootApp />\n    </CarsApiState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}