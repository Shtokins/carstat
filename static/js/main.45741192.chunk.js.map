{"version":3,"sources":["views/MainChart/components/BarChart.js","views/MainChart/chartHelpers.js","views/MainChart/components/LineChart.js","views/MainChart/styles.js","context/carsApi/carsApiContext.js","context/ui/UIContext.js","views/MainChart/components/UIs/UIRadioButton.js","views/MainChart/components/UIs/UIRadioButtonGridType.js","views/MainChart/components/UIs/UIRadioGroup.js","views/MainChart/components/UIs/UICheckbox.js","views/MainChart/components/ControlPanel.js","views/MainChart/components/AdditionalCharts.js","views/MainChart/components/tables/AgGrid.js","views/MainChart/components/tables/ReactTableComponent.js","views/MainChart/components/tables/AntdTable.js","views/MainChart/components/tables/index.js","views/MainChart/dataHelpers.js","views/MainChart/index.js","views/MainChartBlock/index.js","views/RootApp/index.js","context/carsApi/carsApiReducer.js","context/carsApi/actionTypes.js","context/carsApi/carsApiState.js","context/ui/uiReducer.js","context/ui/actionTypes.js","context/ui/uiState.js","App.js","serviceWorker.js","index.js"],"names":["memo","data","options","selectBrand","onElementsClick","chartElement","label","_model","defaultChartDataset","color","borderColor","pointBackgroundColor","backgroundColor","defaultChartOptions","animation","easing","onResize","maintainAspectRatio","responsive","chartColors","getBarChartScales","kpiPrimary","kpiAdditional","showAdditional","removeY","yAxes","id","position","fontStyle","fontColor","ticks","display","scaleLabel","fontSize","labelString","toUpperCase","push","xAxes","gridLines","getLineChartScales","ControlPanelWrapper","styled","div","CarsApiContext","createContext","UIContext","RadioButton","Radio","Button","RadioGroup","Group","value","onChange","uiName","clickHandler","key","e","target","BarChartOutlined","LineChartOutlined","BorderlessTableOutlined","size","onClick","active","name","Or","ButtonGroup","variant","aria-label","startIcon","appearance","iconBefore","isSelected","AntdRadioGroup","AntdRadio","akRadioOptions","changeHandler","checked","_","val","FormControlLabel","control","currentTarget","isChecked","setBlockMode","blockMode","chartSettings","setCharsSettings","tableType","setTableType","carsApiState","useContext","yearsOptions","state","obj","cars","sales","Object","keys","map","year","reverse","getYearsOptions","setSetting","setting","changes","yearPrimary","className","brand","useState","chartData","setChartData","useEffect","labels","line","bar","pie","currentBrand","find","el","shares","revenue","forEach","lineData","datasets","fill","barData","pieData","lineOptions","legend","scales","title","text","barOptions","pieOptions","fetchAdditionalChartData","sm","md","tableData","debounce","params","api","sizeColumnsToFit","style","height","width","columnDefs","rowData","defaultColDef","sortable","resizable","rowSelection","onSelectionChanged","getSelectedRows","onGridReady","onGridSizeChanged","Table","columns","onRowClick","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","firstPageRows","slice","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","Styles","showPagination","showPageSizeOptions","values","dataSource","selectedBrand","tableLayout","bordered","pagination","onSelect","type","selectedRowKeys","headerName","field","company","index","concat","targetKpi","newRow","Header","accessor","dataIndex","colindex","prepareTable","initialChartSettings","MainChart","defaultBrand","additionalBrand","setAdditionalBrand","yAxisID","barChartOptions","barChartData","fetchBarChartData","lineChartOptions","lineChartData","fetchLineChartData","controlPanelProps","cursor","MainChartBlock","getCarsData","getData","useCallback","Sider","Layout","RootApp","collapsed","setCollapsed","setUI","minHeight","collapsible","onCollapse","theme","mode","selectedKeys","Item","icon","UserOutlined","VideoCameraOutlined","UploadOutlined","handlers","action","payload","loading","carsApiReducer","DEFAULT","CarsApiState","children","useReducer","dispatch","a","setLoading","axios","get","response","console","error","Provider","uiReducer","UIState","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.45741192.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nconst BarChart = ({ data, options, selectBrand }) => {\n  const chartClick = chartElement => {\n    if (chartElement[0]) {\n      const {\n        _model: { label }\n      } = chartElement[0];\n      selectBrand(label);\n    }\n  };\n\n  return <Bar options={options} data={data} onElementsClick={chartClick} />;\n};\n\nexport default memo(BarChart);\n","const defaultChartDataset = color => ({\n  borderColor: color,\n  pointBackgroundColor: \"#fff\",\n  backgroundColor: color,\n  data: []\n});\n\nconst defaultChartOptions = {\n  backgroundColor: \"blue\",\n  animation: { easing: \"easeOutQuad\" },\n  onResize: null,\n  maintainAspectRatio: false,\n  responsive: true\n};\n\nconst chartColors = [\n  \"#FF645D\",\n  \"#FFD35B\",\n  \"#71D34D\",\n  \"#00B4C6\",\n  \"#2370EF\",\n  \"#AE43BA\"\n];\n\nconst primaryColor = \"#2370EF\";\nconst secondaryColor = \"#AE43BA\";\n\nexport const fetchBarChartData = ({\n  data,\n  yearPrimary,\n  kpiPrimary,\n  kpiAdditional,\n  showAdditional\n}) => {\n  const labels = [];\n  const datasets = [\n    {\n      ...defaultChartDataset(primaryColor),\n      label: kpiPrimary.toUpperCase(),\n      yAxisID: kpiPrimary\n    }\n  ];\n  if (showAdditional)\n    datasets.push({\n      ...defaultChartDataset(secondaryColor),\n      label: kpiAdditional.toUpperCase(),\n      yAxisID: kpiAdditional\n    });\n  data.forEach(company => {\n    labels.push(company.brand);\n    datasets[0].data.push(company[kpiPrimary][yearPrimary]);\n    if (showAdditional) {\n      datasets[1].data.push(company[kpiAdditional][yearPrimary]);\n    }\n  });\n\n  const scales = getBarChartScales({\n    kpiPrimary,\n    kpiAdditional,\n    showAdditional\n  });\n\n  const barChartOptions = {\n    ...defaultChartOptions,\n    scales,\n    title: {\n      display: true,\n      position: \"top\",\n      text: yearPrimary,\n      fontSize: 18\n    }\n  };\n  return { barChartOptions, barChartData: { labels, datasets } };\n};\n\nconst getBarChartScales = ({\n  kpiPrimary,\n  kpiAdditional,\n  showAdditional,\n  removeY\n}) => {\n  const xAxes = [{ gridLines: { display: false } }];\n  const yAxes = [\n    {\n      id: kpiPrimary,\n      position: \"left\",\n      fontStyle: \"bold\",\n      fontColor: primaryColor,\n      ticks: {\n        fontColor: primaryColor,\n        display: !removeY\n      },\n      scaleLabel: {\n        display: !removeY,\n        fontColor: primaryColor,\n        fontSize: 14,\n        fontStyle: \"bold\",\n        labelString: kpiPrimary.toUpperCase()\n      }\n    }\n  ];\n  if (showAdditional)\n    yAxes.push({\n      id: kpiAdditional,\n      position: \"right\",\n      fontStyle: \"bold\",\n      fontColor: secondaryColor,\n      ticks: {\n        fontColor: secondaryColor,\n        display: !removeY\n      },\n      scaleLabel: {\n        display: !removeY,\n        fontColor: secondaryColor,\n        fontSize: 14,\n        fontStyle: \"bold\",\n        labelString: kpiAdditional.toUpperCase()\n      }\n    });\n  return { xAxes, yAxes };\n};\n\nexport const fetchLineChartData = ({ data, kpiPrimary }) => {\n  let labels;\n\n  const datasets = [];\n\n  data.forEach((company, index) => {\n    const { brand } = company;\n    if (!index) labels = Object.keys(company.sales);\n    datasets.push({\n      ...defaultChartDataset(chartColors[index]),\n      fill: false,\n      label: brand,\n      data: Object.values(company[kpiPrimary])\n    });\n  });\n\n  const scales = getLineChartScales({\n    kpiPrimary\n  });\n\n  const lineChartOptions = { ...defaultChartOptions, scales };\n  return { lineChartOptions, lineChartData: { labels, datasets } };\n};\n\nconst getLineChartScales = ({ kpiPrimary, removeY }) => {\n  const xAxes = [{ gridLines: { display: false } }];\n  const yAxes = [\n    {\n      id: kpiPrimary,\n      position: \"left\",\n      fontStyle: \"bold\",\n      fontColor: primaryColor,\n      ticks: {\n        fontColor: primaryColor,\n        display: !removeY\n      },\n      scaleLabel: {\n        display: !removeY,\n        fontColor: primaryColor,\n        fontSize: 14,\n        fontStyle: \"bold\",\n        labelString: kpiPrimary.toUpperCase()\n      }\n    }\n  ];\n\n  return { xAxes, yAxes };\n};\n\nexport const getYearsOptions = state => {\n  // eslint-disable-next-line\n  const obj = state?.cars?.[0]?.sales ?? {};\n  return Object.keys(obj)\n    .map(year => ({ label: year, value: year }))\n    .reverse();\n};\n\nexport const fetchAdditionalChartData = ({ data, year, brand }) => {\n  const labels = [];\n  const line = [];\n  const bar = [];\n  const pie = [];\n  const currentBrand = data.find(el => el.brand === brand);\n  if (currentBrand) {\n    const { sales, shares, revenue } = currentBrand;\n    Object.keys(currentBrand.sales).forEach(key => {\n      labels.push(key);\n      line.push(sales[key]);\n      bar.push(revenue[key]);\n    });\n    pie.push(shares[year]);\n    pie.push(100 - shares[year]);\n  }\n  const lineData = {\n    labels,\n    datasets: [\n      {\n        ...defaultChartDataset(primaryColor),\n        data: line,\n        label: brand,\n        fill: false\n      }\n    ]\n  };\n  const barData = {\n    labels,\n    datasets: [\n      {\n        ...defaultChartDataset(secondaryColor),\n        data: bar,\n        label: brand\n      }\n    ]\n  };\n  const pieData = {\n    labels: [brand, \"Others\"],\n    datasets: [\n      {\n        data: [...pie],\n        backgroundColor: [chartColors[0], chartColors[1]]\n        // label: brand\n      }\n    ]\n  };\n  const lineOptions = {\n    ...defaultChartOptions,\n    legend: { display: false },\n    scales: getLineChartScales({ kpiPrimary: \"sales\", removeY: true }),\n    title: {\n      display: true,\n      position: \"top\",\n      text: `${brand} sales history`,\n      fontSize: 15\n    }\n  };\n  const barOptions = {\n    ...defaultChartOptions,\n    legend: { display: false },\n    scales: getBarChartScales({ kpiPrimary: \"revenue\", removeY: true }),\n    title: {\n      display: true,\n      position: \"top\",\n      text: `${brand} sales revenue`,\n      fontSize: 15\n    }\n  };\n  const pieOptions = {\n    legend: { display: false },\n    title: {\n      display: true,\n      position: \"top\",\n      text: `${brand} ${year} market share`,\n      fontSize: 15\n    },\n    animation: { easing: \"easeOutQuad\" },\n    onResize: null,\n    maintainAspectRatio: false,\n    responsive: true\n  };\n\n  return { lineData, barData, pieData, lineOptions, barOptions, pieOptions };\n};\n","import React, { memo } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst LineChart = ({ data, options }) => {\n  return <Line options={options} data={data} />;\n};\n\nexport default memo(LineChart);\n","import styled from \"styled-components\";\n\nconst ControlPanelWrapper = styled.div`\n  height: 60px;\n  width: 100%;\n  margin: 20px 0;\n  border-radius: 10px;\n  background-color: #fff;\n  padding: 10px;\n  display: flex;\n  align-items: center;\n  border: 1px solid silver;\n  > div {\n    margin-right: 15px;\n  }\n\n  .ant-radio-wrapper {\n    display: block;\n  }\n\n  .antd-grid-container {\n    overflow: auto;\n  }\n\n  .controlUnit {\n    margin-right: 15px;\n    .ant-radio-button-wrapper {\n      .anticon {\n        vertical-align: 0;\n        font-size: 18px;\n        margin-right: 5px;\n      }\n    }\n    .ui.button > .icon {\n      color: #fff;\n      font-size: 16px;\n      margin-right: 4px;\n    }\n    .PrivateSwitchBase-root-1 {\n      padding: 4px;\n    }\n    .MuiFormControlLabel-root {\n      margin-bottom: 0px;\n    }\n    > label {\n      margin-bottom: 0px;\n    }\n    .ui.radio.checkbox {\n      margin-top: 7px;\n    }\n  }\n`;\n\nexport { ControlPanelWrapper };\n","import { createContext } from \"react\";\n\nexport const CarsApiContext = createContext();\n","import { createContext } from \"react\";\n\nexport const UIContext = createContext();\n","import React, { memo } from \"react\";\nimport { Radio } from \"antd\";\nimport {\n  BarChartOutlined,\n  LineChartOutlined,\n  BorderlessTableOutlined\n} from \"@ant-design/icons\";\nimport TimelineOutlinedIcon from \"@material-ui/icons/TimelineOutlined\";\nimport EqualizerOutlinedIcon from \"@material-ui/icons/EqualizerOutlined\";\nimport TableChartOutlinedIcon from \"@material-ui/icons/TableChartOutlined\";\nimport { Button, Icon as SuiIcon } from \"semantic-ui-react\";\nimport { ButtonGroup, Button as MuiButton } from \"@material-ui/core\";\nimport AkButton, { ButtonGroup as AkButtonGroup } from \"@atlaskit/button\";\nimport GraphBarIcon from \"@atlaskit/icon/glyph/graph-bar\";\nimport GraphLineIcon from \"@atlaskit/icon/glyph/graph-line\";\nimport TableIcon from \"@atlaskit/icon/glyph/table\";\n\nconst RadioButton = Radio.Button;\nconst RadioGroup = Radio.Group;\n\nconst UIRadioButton = ({ value, onChange, uiName }) => {\n  const clickHandler = key => onChange(key);\n\n  switch (uiName) {\n    case \"antd\":\n      return (\n        <RadioGroup value={value} onChange={e => clickHandler(e.target.value)}>\n          <RadioButton value=\"bar\">\n            <BarChartOutlined />\n            Bar\n          </RadioButton>\n          <RadioButton value=\"line\">\n            <LineChartOutlined />\n            Line\n          </RadioButton>\n          <RadioButton value=\"table\">\n            <BorderlessTableOutlined />\n            Table\n          </RadioButton>\n        </RadioGroup>\n      );\n    case \"semantic\":\n      return (\n        <Button.Group color=\"blue\" value={value} size=\"small\">\n          <Button onClick={() => clickHandler(\"bar\")} active={value === \"bar\"}>\n            <SuiIcon name=\"chart bar\" />\n            Bar\n          </Button>\n          <Button.Or />\n          <Button\n            onClick={() => clickHandler(\"line\")}\n            active={value === \"line\"}\n          >\n            <SuiIcon name=\"chart line\" />\n            Line\n          </Button>\n          <Button.Or />\n          <Button\n            onClick={() => clickHandler(\"table\")}\n            active={value === \"table\"}\n          >\n            <SuiIcon name=\"table\" />\n            Table\n          </Button>\n        </Button.Group>\n      );\n    case \"material\":\n      return (\n        <ButtonGroup\n          variant=\"contained\"\n          color=\"primary\"\n          aria-label=\"contained primary button group\"\n          value={value}\n        >\n          <MuiButton\n            startIcon={<EqualizerOutlinedIcon />}\n            onClick={() => clickHandler(\"bar\")}\n          >\n            Bar\n          </MuiButton>\n          <MuiButton\n            startIcon={<TimelineOutlinedIcon />}\n            onClick={() => clickHandler(\"line\")}\n          >\n            Line\n          </MuiButton>\n          <MuiButton\n            startIcon={<TableChartOutlinedIcon />}\n            onClick={() => clickHandler(\"table\")}\n          >\n            Table\n          </MuiButton>\n        </ButtonGroup>\n      );\n    case \"atlassian\":\n      return (\n        <AkButtonGroup appearance=\"primary\">\n          <AkButton\n            onClick={() => clickHandler(\"bar\")}\n            iconBefore={<GraphBarIcon />}\n            isSelected={value === \"bar\"}\n          >\n            Bar\n          </AkButton>\n          <AkButton\n            onClick={() => clickHandler(\"line\")}\n            iconBefore={<GraphLineIcon />}\n            isSelected={value === \"line\"}\n          >\n            Line\n          </AkButton>\n          <AkButton\n            onClick={() => clickHandler(\"table\")}\n            iconBefore={<TableIcon />}\n            isSelected={value === \"table\"}\n          >\n            Table\n          </AkButton>\n        </AkButtonGroup>\n      );\n    default:\n      return null;\n  }\n};\n\nexport default memo(UIRadioButton);\n","import React, { memo } from \"react\";\nimport { Radio } from \"antd\";\nimport { Button } from \"semantic-ui-react\";\nimport { ButtonGroup, Button as MuiButton } from \"@material-ui/core\";\nimport AkButton, { ButtonGroup as AkButtonGroup } from \"@atlaskit/button\";\n\nconst RadioButton = Radio.Button;\nconst RadioGroup = Radio.Group;\n\nconst UIRadioButtonGridType = ({ value, onChange, uiName }) => {\n  const clickHandler = key => onChange(key);\n  switch (uiName) {\n    case \"antd\":\n      return (\n        <RadioGroup value={value} onChange={e => clickHandler(e.target.value)}>\n          <RadioButton value=\"ag\">ag-Grid</RadioButton>\n          <RadioButton value=\"reacttable\">React-Table</RadioButton>\n          <RadioButton value=\"table\">Ant Design Grid</RadioButton>\n        </RadioGroup>\n      );\n    case \"semantic\":\n      return (\n        <Button.Group color=\"blue\" value={value} size=\"small\">\n          <Button onClick={() => clickHandler(\"ag\")} active={value === \"ag\"}>\n            ag-Grid\n          </Button>\n          <Button.Or />\n          <Button\n            onClick={() => clickHandler(\"reacttable\")}\n            active={value === \"reacttable\"}\n          >\n            React-Table\n          </Button>\n          <Button.Or />\n          <Button\n            onClick={() => clickHandler(\"antd\")}\n            active={value === \"antd\"}\n          >\n            Ant Design Grid\n          </Button>\n        </Button.Group>\n      );\n    case \"material\":\n      return (\n        <ButtonGroup\n          variant=\"contained\"\n          color=\"primary\"\n          aria-label=\"contained primary button group\"\n          value={value}\n        >\n          <MuiButton onClick={() => clickHandler(\"ag\")}>ag-Grid</MuiButton>\n          <MuiButton onClick={() => clickHandler(\"reacttable\")}>\n            React-Table\n          </MuiButton>\n          <MuiButton onClick={() => clickHandler(\"antd\")}>\n            Ant Design Grid\n          </MuiButton>\n        </ButtonGroup>\n      );\n    case \"atlassian\":\n      return (\n        <AkButtonGroup appearance=\"primary\">\n          <AkButton\n            onClick={() => clickHandler(\"ag\")}\n            isSelected={value === \"ag\"}\n          >\n            ag-Grid\n          </AkButton>\n          <AkButton\n            onClick={() => clickHandler(\"reacttable\")}\n            isSelected={value === \"reacttable\"}\n          >\n            React-Table\n          </AkButton>\n          <AkButton\n            onClick={() => clickHandler(\"antd\")}\n            isSelected={value === \"antd\"}\n          >\n            Ant Design Grid\n          </AkButton>\n        </AkButtonGroup>\n      );\n    default:\n      return null;\n  }\n};\n\nexport default memo(UIRadioButtonGridType);\n","import React, { memo } from \"react\";\nimport { Radio as AntdRadio } from \"antd\";\nimport { Radio as SuiRadio } from \"semantic-ui-react\";\nimport MuiRadio from \"@material-ui/core/Radio\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { RadioGroup as AkRadioGroup } from \"@atlaskit/radio\";\n\nconst AntdRadioGroup = AntdRadio.Group;\nconst akRadioOptions = [\n  { name: \"color2\", value: \"sales\", label: \"Sales\" },\n  { name: \"color2\", value: \"revenue\", label: \"Revenue\" }\n];\nconst UIRadioGroup = ({ value, onChange, uiName }) => {\n  const changeHandler = key => onChange(key);\n\n  switch (uiName) {\n    case \"antd\":\n      return (\n        <AntdRadioGroup\n          onChange={e => changeHandler(e.target.value)}\n          value={value}\n        >\n          <AntdRadio value=\"sales\">Sales</AntdRadio>\n          <AntdRadio value=\"revenue\">Revenue</AntdRadio>\n        </AntdRadioGroup>\n      );\n    case \"semantic\":\n      return (\n        <>\n          <div>\n            <SuiRadio\n              label=\"Sales\"\n              name=\"radioGroup\"\n              value=\"sales\"\n              checked={value === \"sales\"}\n              onChange={(_, val) => changeHandler(val.value)}\n            />\n          </div>\n          <div>\n            <SuiRadio\n              label=\"Revenue\"\n              name=\"radioGroup\"\n              value=\"revenue\"\n              checked={value === \"revenue\"}\n              onChange={(_, val) => changeHandler(val.value)}\n            />\n          </div>\n        </>\n      );\n    case \"material\":\n      return (\n        <>\n          <div>\n            <FormControlLabel\n              control={\n                <MuiRadio\n                  label=\"Sales\"\n                  name=\"radioGroup1\"\n                  value=\"sales\"\n                  checked={value === \"sales\"}\n                  onChange={e => changeHandler(e.target.value)}\n                />\n              }\n              label=\"Sales\"\n            />\n          </div>\n          <div>\n            <FormControlLabel\n              control={\n                <MuiRadio\n                  label=\"Revenue\"\n                  name=\"radioGroup1\"\n                  value=\"revenue\"\n                  checked={value === \"revenue\"}\n                  onChange={e => changeHandler(e.target.value)}\n                />\n              }\n              label=\"Revenue\"\n            />\n          </div>\n        </>\n      );\n    case \"atlassian\":\n      return (\n        <AkRadioGroup\n          value={value}\n          options={akRadioOptions}\n          onChange={e => changeHandler(e.currentTarget.value)}\n        />\n      );\n    default:\n      return null;\n  }\n};\n\nexport default memo(UIRadioGroup);\n","import React, { memo } from \"react\";\nimport { Checkbox as AntdCheckbox } from \"antd\";\nimport { Checkbox as SuiCheckbox } from \"semantic-ui-react\";\nimport MuiCheckbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { Checkbox as AkCheckbox } from \"@atlaskit/checkbox\";\n\nconst UICheckbox = ({ checked, onChange, uiName }) => {\n  const changeHandler = key => onChange(key);\n  const label = \"Additional KPI\";\n  switch (uiName) {\n    case \"antd\":\n      return (\n        <AntdCheckbox\n          checked={checked}\n          onChange={e => changeHandler(e.target.checked)}\n        >\n          {label}\n        </AntdCheckbox>\n      );\n    case \"semantic\":\n      return (\n        <SuiCheckbox\n          label={label}\n          checked={checked}\n          onChange={e => changeHandler(e.target.checked)}\n        />\n      );\n    case \"material\":\n      return (\n        <FormControlLabel\n          control={\n            <MuiCheckbox\n              checked={checked}\n              onChange={e => changeHandler(e.target.checked)}\n            />\n          }\n          label={label}\n        />\n      );\n    case \"atlassian\":\n      return (\n        <AkCheckbox\n          isChecked={checked}\n          onChange={e => changeHandler(e.target.checked)}\n          label={label}\n        />\n      );\n    default:\n      return null;\n  }\n};\n\nexport default memo(UICheckbox);\n","import React, { memo, useContext } from \"react\";\nimport { ControlPanelWrapper } from \"../styles\";\nimport { Select } from \"antd\";\nimport { CarsApiContext } from \"../../../context/carsApi/carsApiContext\";\nimport { UIContext } from \"../../../context/ui/UIContext\";\nimport { getYearsOptions } from \"../chartHelpers\";\nimport UIRadioButton from \"./UIs/UIRadioButton\";\nimport UIRadioButtonGridType from \"./UIs/UIRadioButtonGridType\";\nimport UIRadioGroup from \"../components/UIs/UIRadioGroup\";\nimport UICheckbox from \"../components/UIs/UICheckbox\";\n\nconst ControlPanel = ({\n  setBlockMode,\n  blockMode,\n  chartSettings,\n  setCharsSettings,\n  tableType,\n  setTableType\n}) => {\n  const { carsApiState } = useContext(CarsApiContext);\n  const { uiName } = useContext(UIContext);\n  const yearsOptions = getYearsOptions(carsApiState);\n  const setSetting = (setting, value) => {\n    const changes = { [setting]: value };\n    if (setting === \"kpiPrimary\") {\n      changes.kpiAdditional = value === \"sales\" ? \"revenue\" : \"sales\";\n    }\n    if (setting === \"kpiAdditional\") {\n      changes.kpiPrimary = value === \"sales\" ? \"revenue\" : \"sales\";\n    }\n    setCharsSettings({ ...chartSettings, ...changes });\n  };\n\n  const { yearPrimary, kpiPrimary, showAdditional } = chartSettings;\n\n  return (\n    <ControlPanelWrapper>\n      <div className=\"controlUnit\">\n        <UIRadioButton\n          value={blockMode}\n          onChange={setBlockMode}\n          uiName={uiName}\n        />\n      </div>\n\n      {blockMode === \"bar\" && (\n        <Select\n          onChange={year => setSetting(\"yearPrimary\", year)}\n          options={yearsOptions}\n          value={yearPrimary}\n        />\n      )}\n      <div className=\"controlUnit\">\n        <UIRadioGroup\n          value={kpiPrimary}\n          onChange={key => setSetting(\"kpiPrimary\", key)}\n          uiName={uiName}\n        />\n      </div>\n      {blockMode === \"bar\" && (\n        <UICheckbox\n          checked={showAdditional}\n          onChange={key => setSetting(\"showAdditional\", key)}\n          uiName={uiName}\n        />\n      )}\n      {blockMode === \"table\" && (\n        <div className=\"controlUnit\">\n          <UIRadioButtonGridType\n            value={tableType}\n            onChange={setTableType}\n            uiName={uiName}\n          />\n        </div>\n      )}\n    </ControlPanelWrapper>\n  );\n};\n\nexport default memo(ControlPanel);\n","import React, { useState, useEffect, memo, useContext } from \"react\";\nimport { fetchAdditionalChartData } from \"../chartHelpers\";\nimport { Row, Col } from \"antd\";\nimport { CarsApiContext } from \"../../../context/carsApi/carsApiContext\";\nimport { Bar, Line, Doughnut } from \"react-chartjs-2\";\n\nconst AdditionalCharts = ({ brand, yearPrimary }) => {\n  const {\n    carsApiState: { cars }\n  } = useContext(CarsApiContext);\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    const {\n      barData,\n      barOptions,\n      lineData,\n      lineOptions,\n      pieData,\n      pieOptions\n    } = fetchAdditionalChartData({\n      data: cars,\n      year: yearPrimary,\n      brand\n    });\n    setChartData({\n      barData,\n      barOptions,\n      lineData,\n      lineOptions,\n      pieData,\n      pieOptions\n    });\n  }, [brand, yearPrimary]);\n  if (!chartData) return null;\n  const {\n    barData,\n    barOptions,\n    lineData,\n    lineOptions,\n    pieData,\n    pieOptions\n  } = chartData;\n  return (\n    <Row className=\"additional-charts-row\">\n      <Col sm={24} md={8}>\n        <Line options={lineOptions} data={lineData} />\n      </Col>\n      <Col sm={24} md={8}>\n        <Bar options={barOptions} data={barData} />\n      </Col>\n      <Col sm={24} md={8}>\n        <Doughnut options={pieOptions} data={pieData} />\n      </Col>\n    </Row>\n  );\n};\nexport default memo(AdditionalCharts);\n","import React, { memo } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\nimport { debounce } from \"throttle-debounce\";\n\nconst AgGrid = ({ tableData, selectBrand }) => {\n  const onSelectionChanged = params => {\n    var selectedRows = params.api.getSelectedRows();\n    const { brand } = selectedRows[0];\n    selectBrand(brand);\n  };\n\n  const onGridReady = params => {\n    params.api.sizeColumnsToFit();\n  };\n\n  const onResize = debounce(300, params => {\n    params.api.sizeColumnsToFit();\n  });\n\n  return (\n    <div className=\"ag-theme-balham\" style={{ height: \"100%\", width: \"100%\" }}>\n      <AgGridReact\n        columnDefs={tableData.columnDefs}\n        rowData={tableData.rowData}\n        defaultColDef={{\n          sortable: true,\n          resizable: true\n        }}\n        rowSelection=\"single\"\n        onSelectionChanged={onSelectionChanged}\n        onGridReady={onGridReady}\n        onGridSizeChanged={onResize}\n      ></AgGridReact>\n    </div>\n  );\n};\n\nexport default memo(AgGrid);\n","/* eslint-disable react/jsx-key */\nimport React, { memo } from \"react\";\nimport { useTable, useSortBy } from \"react-table\";\nimport styled from \"styled-components\";\n\nfunction Table({ columns, data, onRowClick }) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable(\n    {\n      columns,\n      data\n    },\n    useSortBy\n  );\n\n  // We don't want to render all 2000 rows for this example, so cap\n  // it at 20 for this use case\n  const firstPageRows = rows.slice(0, 20);\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                // Add the sorting props to control sorting. For this example\n                // we can add them into the header props\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render(\"Header\")}\n                  {/* Add a sort direction indicator */}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? \" 🔽\"\n                        : \" 🔼\"\n                      : \"\"}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {firstPageRows.map(row => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()} onClick={() => onRowClick(row)}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n}\n\nconst ReactTableComponent = ({ tableData: { columns, data }, selectBrand }) => {\n  const onRowClick = row => {\n    const { brand } = row.values;\n    selectBrand(brand);\n  };\n  return (\n    <Styles>\n      <Table\n        data={data}\n        columns={columns}\n        showPagination={false}\n        showPageSizeOptions={false}\n        className=\"-striped -highlight\"\n        onRowClick={onRowClick}\n      />\n    </Styles>\n  );\n};\n\nexport default memo(ReactTableComponent);\n\nconst Styles = styled.div`\n  padding: 1rem;\n  overflow-y: auto;\n  height: 100%;\n  width: 100%;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      cursor: pointer;\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n","import React, { memo } from \"react\";\nimport { Table } from \"antd\";\n\nconst AntdTable = ({\n  tableData: { columns, dataSource },\n  selectBrand,\n  selectedBrand\n}) => {\n  const onSelectionChanged = row => {\n    const { brand } = row;\n    selectBrand(brand);\n  };\n  return (\n    <div className=\"antd-grid-container\">\n      <Table\n        columns={columns}\n        dataSource={dataSource}\n        tableLayout=\"auto\"\n        bordered\n        pagination={false}\n        size=\"middle\"\n        rowSelection={{\n          onSelect: onSelectionChanged,\n          type: \"radio\",\n          selectedRowKeys: [selectedBrand]\n        }}\n      />\n    </div>\n  );\n};\n\nexport default memo(AntdTable);\n","import React, { memo } from \"react\";\nimport { prepareTable } from \"../../dataHelpers\";\nimport AgGrid from \"./AgGrid\";\nimport ReactTableComponent from \"./ReactTableComponent\";\nimport AntdTable from \"./AntdTable\";\n\nconst Tables = ({\n  data,\n  tableType,\n  kpiPrimary,\n  selectBrand,\n  selectedBrand\n}) => {\n  const tableData = prepareTable(data, tableType, kpiPrimary);\n\n  if (tableType === \"ag\") {\n    return <AgGrid tableData={tableData} selectBrand={selectBrand} />;\n  } else if (tableType === \"reacttable\") {\n    return (\n      <ReactTableComponent tableData={tableData} selectBrand={selectBrand} />\n    );\n  } else {\n    return (\n      <AntdTable\n        tableData={tableData}\n        selectBrand={selectBrand}\n        selectedBrand={selectedBrand}\n      />\n    );\n  }\n};\n\nexport default memo(Tables);\n","export const prepareTable = (data, tableType, kpiPrimary) => {\n  if (tableType === \"ag\") {\n    let columnDefs = [{ headerName: \"Brand\", field: \"brand\" }];\n    const rowData = [];\n    data.forEach((company, index) => {\n      if (!index) {\n        columnDefs = columnDefs.concat(\n          Object.keys(company.sales).map(year => ({\n            headerName: year,\n            field: year\n          }))\n        );\n      }\n      const targetKpi = company[kpiPrimary];\n      const newRow = { brand: company.brand };\n\n      Object.keys(targetKpi).forEach(year => (newRow[year] = targetKpi[year]));\n      rowData.push(newRow);\n    });\n    return { columnDefs, rowData };\n  } else if (tableType === \"reacttable\") {\n    let columns = [{ sortable: true, Header: \"Brand\", accessor: \"brand\" }];\n    const rowData = [];\n    data.forEach((company, index) => {\n      if (!index) {\n        columns = columns.concat(\n          Object.keys(company.sales).map(year => ({\n            sortable: true,\n            Header: year,\n            accessor: year\n          }))\n        );\n      }\n      const targetKpi = company[kpiPrimary];\n      const newRow = { brand: company.brand };\n\n      Object.keys(targetKpi).forEach(year => (newRow[year] = targetKpi[year]));\n      rowData.push(newRow);\n    });\n    return { columns, data: rowData };\n  } else {\n    let columns = [{ title: \"Brand\", dataIndex: \"brand\", key: \"001\" }];\n    const dataSource = [];\n    data.forEach((company, index) => {\n      if (!index) {\n        columns = columns.concat(\n          Object.keys(company.sales).map((year, colindex) => ({\n            title: year,\n            dataIndex: year,\n            key: year + colindex\n          }))\n        );\n      }\n      const targetKpi = company[kpiPrimary];\n      const newRow = { brand: company.brand };\n\n      Object.keys(targetKpi).forEach(year => (newRow[year] = targetKpi[year]));\n      newRow.key = company.brand;\n      dataSource.push(newRow);\n    });\n    return { columns, dataSource };\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport BarChart from \"./components/BarChart\";\nimport { fetchBarChartData, fetchLineChartData } from \"./chartHelpers\";\nimport LineChart from \"./components/LineChart\";\nimport ControlPanel from \"./components/ControlPanel\";\nimport AdditionalCharts from \"./components/AdditionalCharts\";\nimport Tables from \"./components/tables\";\n\nconst initialChartSettings = {\n  yearPrimary: \"2019\",\n  kpiPrimary: \"sales\",\n  kpiAdditional: \"revenue\",\n  showAdditional: false\n};\n\nexport const MainChart = ({ cars }) => {\n  const defaultBrand = cars?.[0]?.brand ?? \"Toyota\";\n  const [blockMode, setBlockMode] = useState(\"bar\");\n  const [chartSettings, setCharsSettings] = useState(initialChartSettings);\n  const [chartData, setChartData] = useState(null);\n  const [additionalBrand, setAdditionalBrand] = useState(defaultBrand);\n  const [tableType, setTableType] = useState(\"ag\");\n\n  useEffect(() => {\n    const {\n      yearPrimary,\n      kpiPrimary,\n      kpiAdditional,\n      showAdditional\n    } = chartSettings;\n    const { barChartData, barChartOptions } = fetchBarChartData({\n      data: cars,\n      yearPrimary,\n      kpiPrimary,\n      kpiAdditional,\n      showAdditional\n    });\n    const { lineChartData, lineChartOptions } = fetchLineChartData({\n      data: cars,\n      yearPrimary,\n      kpiPrimary,\n      showAdditional\n    });\n    setChartData({\n      barChartOptions,\n      barChartData,\n      lineChartData,\n      lineChartOptions\n    });\n  }, [cars, chartSettings]);\n  if (!cars) return null;\n  const controlPanelProps = {\n    setBlockMode,\n    blockMode,\n    chartSettings,\n    setCharsSettings,\n    tableType,\n    setTableType\n  };\n  return (\n    <div className=\"main-chart\">\n      <ControlPanel {...controlPanelProps} />\n\n      <div\n        className=\"main-chart-container\"\n        style={blockMode === \"bar\" ? { cursor: \"pointer\" } : {}}\n      >\n        {chartData && blockMode === \"bar\" && (\n          <BarChart\n            data={chartData.barChartData}\n            options={chartData.barChartOptions}\n            selectBrand={setAdditionalBrand}\n          />\n        )}\n        {chartData && blockMode === \"line\" && (\n          <LineChart\n            data={chartData.lineChartData}\n            options={chartData.lineChartOptions}\n          />\n        )}\n        {blockMode === \"table\" && (\n          <Tables\n            data={cars}\n            tableType={tableType}\n            kpiPrimary={chartSettings.kpiPrimary}\n            selectBrand={setAdditionalBrand}\n            selectedBrand={additionalBrand}\n          />\n        )}\n      </div>\n      <AdditionalCharts\n        brand={additionalBrand}\n        yearPrimary={chartSettings.yearPrimary}\n      />\n    </div>\n  );\n};\n","import React, { useEffect, useContext, useCallback } from \"react\";\nimport { MainChart } from \"../MainChart\";\nimport { CarsApiContext } from \"../../context/carsApi/carsApiContext\";\n\nexport const MainChartBlock = () => {\n  const { getCarsData, carsApiState } = useContext(CarsApiContext);\n  const getData = useCallback(() => {\n    getCarsData();\n    //eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    getData();\n  }, [getData]);\n  // console.log(\"carsApiState: \", carsApiState);\n  return carsApiState.cars ? <MainChart cars={carsApiState.cars} /> : null;\n};\n","import React, { useState, useContext } from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { MainChartBlock } from \"../MainChartBlock\";\nimport { UIContext } from \"../../context/ui/UIContext\";\nimport {\n  UserOutlined,\n  VideoCameraOutlined,\n  UploadOutlined\n} from \"@ant-design/icons\";\n\nconst { Sider } = Layout;\n\nexport const RootApp = () => {\n  const [collapsed, setCollapsed] = useState(false);\n  const { setUI, uiName } = useContext(UIContext);\n\n  return (\n    <Layout style={{ minHeight: \"100vh\", backgroundColor: \"#f2f2f2\" }}>\n      <Sider collapsible collapsed={collapsed} onCollapse={setCollapsed}>\n        <div className=\"logo\">Logo</div>\n        <Menu\n          theme=\"dark\"\n          mode=\"inline\"\n          selectedKeys={[uiName]}\n          onClick={setUI}\n        >\n          <Menu.Item key=\"antd\" icon={<UserOutlined />}>\n            Antd\n          </Menu.Item>\n          <Menu.Item key=\"semantic\" icon={<VideoCameraOutlined />}>\n            Semantic\n          </Menu.Item>\n          <Menu.Item key=\"material\" icon={<UploadOutlined />}>\n            Material\n          </Menu.Item>\n          <Menu.Item key=\"atlassian\" icon={<UploadOutlined />}>\n            Atlassian\n          </Menu.Item>\n        </Menu>\n      </Sider>\n      <div className=\"dashboard container\">\n        <MainChartBlock />\n      </div>\n    </Layout>\n  );\n};\n","import * as t from \"./actionTypes\";\n\nconst handlers = {\n  [t.GET_CARS_DATA]: (state, action) => ({\n    ...state,\n    cars: action.payload,\n    loading: false\n  }),\n  [t.SET_LOADING]: state => ({ ...state, loading: true }),\n  DEFAULT: state => state\n};\n\nexport const carsApiReducer = (state, action) => {\n  const handler = handlers[action.type] || handlers.DEFAULT;\n  return handler(state, action);\n};\n","export const GET_CARS_DATA = \"carsApi/GET_CARS_DATA\";\nexport const SET_LOADING = \"carsApi/SET_LOADING\";\n","import React, { useReducer } from \"react\";\nimport { CarsApiContext } from \"./carsApiContext\";\nimport { carsApiReducer } from \"./carsApiReducer\";\nimport * as t from \"./actionTypes\";\nimport axios from \"axios\";\n\nexport const CarsApiState = ({ children }) => {\n  const [state, dispatch] = useReducer(carsApiReducer, {});\n\n  const getCarsData = async () => {\n    setLoading();\n    try {\n      const response = await axios.get(\"cars.json\");\n      // console.log(\"response: \", response);\n      dispatch({ type: t.GET_CARS_DATA, payload: response.data });\n    } catch (error) {\n      console.error(\"GET DATA ERROR: \", error);\n    }\n  };\n\n  const setLoading = () => {\n    dispatch({ type: t.SET_LOADING });\n  };\n\n  return (\n    <CarsApiContext.Provider value={{ getCarsData, carsApiState: state }}>\n      {children}\n    </CarsApiContext.Provider>\n  );\n};\n","import * as t from \"./actionTypes\";\n\nconst handlers = {\n  [t.SET_UI]: (state, action) => ({\n    ...state,\n    uiName: action.payload\n  }),\n  DEFAULT: state => state\n};\n\nexport const uiReducer = (state, action) => {\n  const handler = handlers[action.type] || handlers.DEFAULT;\n  return handler(state, action);\n};\n","export const SET_UI = \"ui/SET_UI\";\n","import React, { useReducer } from \"react\";\nimport { UIContext } from \"./UIContext\";\nimport { uiReducer } from \"./uiReducer\";\nimport * as t from \"./actionTypes\";\n\nexport const UIState = ({ children }) => {\n  const [state, dispatch] = useReducer(uiReducer, { uiName: \"antd\" });\n\n  const setUI = e => {\n    dispatch({ type: t.SET_UI, payload: e.key });\n  };\n\n  return (\n    <UIContext.Provider value={{ uiName: state.uiName, setUI }}>\n      {children}\n    </UIContext.Provider>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { RootApp } from \"./views/RootApp\";\nimport \"antd/dist/antd.css\";\nimport { CarsApiState } from \"./context/carsApi/carsApiState\";\nimport { UIState } from \"./context/ui/uiState\";\n\nfunction App() {\n  return (\n    <UIState>\n      <CarsApiState>\n        <RootApp />\n      </CarsApiState>\n    </UIState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}